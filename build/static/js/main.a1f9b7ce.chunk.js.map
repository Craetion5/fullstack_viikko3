{"version":3,"sources":["services/personManager.js","index.js"],"names":["baseUrl","personManager","axios","get","newObject","post","id","delete","concat","Notification","_ref","message","className","react_default","a","createElement","App","_useState","useState","name","number","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","newFilter","setNewFilter","_useState9","_useState10","setMessage","_useState11","_useState12","errorMessage","setErrorMessage","useEffect","console","log","then","response","data","length","src_Notification","value","onChange","event","target","onSubmit","preventDefault","thing","map","c","includes","window","alert","setTimeout","type","filter","key","onClick","confirm","catch","error","removePerson","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a1f9b7ce.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst del = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  del: del\n}","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport personManager from './services/personManager'\nimport './index.css'\n\nconst Notification = ({ message, className }) => {\n    \n    if (message === \"\") {\n        return null\n    }\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nconst App = () => {\n    const [persons, setPersons] = useState([\n        { name: 'test', number: '1200' }\n    ])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [newFilter, setNewFilter] = useState('')\n    const [message, setMessage] = useState('')\n    const [errorMessage, setErrorMessage] = useState('')\n\n\n    useEffect(() => {\n        console.log('effect')\n        personManager\n            .getAll()\n            .then(response => {\n                console.log('promise fulfilled')\n                setPersons(response.data)\n            })\n    }, [])\n    console.log('render', persons.length, 'notes')\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const thing = {\n            name: newName,\n            number: newNumber\n        }\n        if (persons.map(c => c.name).includes(newName)) {\n            if (window.alert(`${newName} on jo luettelossa.`)) {\n                //    personManager.update(persons.filter(c => c.name = newName)[0].id, thing)\n                //    .then(response => {\n                //        console.log(response)\n                //!!\n                //        window.location.reload();\n                //    })\n            }\n        } else {\n            setPersons(persons.concat(thing))\n            setNewName('')\n            setNewNumber('')\n            personManager\n                .create(thing)\n                .then(response => {\n                    console.log(response)\n                    setPersons(persons.concat(response.data))\n                    setMessage(\n                        `Lisättiin ${thing.name}`\n                    )\n                    setTimeout(() => {\n                        setMessage(\"\")\n                    }, 5000)\n                })\n        }\n    }\n\n    const removePerson = (c) => {\n        if (window.confirm(`Poistetaanko ${c.name}?`)) {\n            personManager.del(c.id)\n                .then(response => {\n                    setMessage(\n                        `Poistettiin ${c.name}.`\n                    )\n                    setTimeout(() => {\n                        setMessage(\"\")\n                    }, 5000)\n                    console.log(response)\n                    personManager.getAll().then(response => {\n                        setPersons(response.data)\n                    })\n                    //window.location.reload();\n                })\n                .catch(error => {\n                    setErrorMessage(\n                        `Henkilö ${c.name} oli jo poistettu...`\n                    )\n                    setTimeout(() => {\n                        setErrorMessage(\"\")\n                    }, 5000)\n                  })\n                  \n\n        }\n\n    }\n\n    const handleNameChange = (event) => {\n        console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n    const handleFilterChange = (event) => {\n        console.log(event.target.value)\n        setNewFilter(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        console.log(event.target.value)\n        setNewNumber(event.target.value)\n    }\n\n    const personList = () => persons\n        .filter(c => c.name.includes(newFilter))\n        .map(c =>\n            <div key={c.name}>\n                {c.name} {c.number} <button onClick={() => removePerson(c)}>\n                    poista\n                    </button>\n            </div>)\n\n    return (\n        <div>\n            <h2>Puhelinluettelo</h2>\n            <Notification message={message} className = \"msg\"/>\n            <Notification message={errorMessage} className = \"emsg\"/>\n            <form>\n                rajaa näytettäviä<input value={newFilter}\n                    onChange={handleFilterChange}></input>\n            </form><br></br>\n            <h3>lisää uusi</h3>\n            <form onSubmit={addPerson}>\n                <div>\n                    nimi: <input value={newName}\n                        onChange={handleNameChange} />\n                </div>\n                <div>numero: <input value={newNumber}\n                    onChange={handleNumberChange} /></div>\n                <div>\n                    <button type=\"submit\">\n                        lisää\n                    </button>\n                </div>\n            </form>\n            <h2>Numerot</h2>\n            {personList()}\n        </div>\n    )\n\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\nexport default App"],"sourceRoot":""}